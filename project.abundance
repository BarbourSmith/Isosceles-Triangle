{
    "atomType": "Molecule",
    "name": "Isosceles-Triangle",
    "x": 0,
    "y": 0,
    "uniqueID": "38a060c7-0365-40b4-bf50-232b07988e02",
    "ioValues": [],
    "description": "Molecules provide an organizational structure to contain atoms. Double click on a molecule to enter it. Use the up arrow in the upper right hand corner of the screen to go up one level.",
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": "9f3e894c-cc06-48b2-87c1-e65065d7be3f",
            "ioValues": [],
            "description": "Connect geometry here to make it available in the next level up. "
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.2294973544973545,
            "y": 0.5865921787709497,
            "uniqueID": "b3ae0890-e8a4-4496-843f-083c385a6b78",
            "ioValues": [
                {
                    "name": "height",
                    "ioValue": 10
                },
                {
                    "name": "base",
                    "ioValue": 10
                }
            ],
            "description": "Defines a Replicad code block.",
            "codeVersion": 1,
            "code": " \n      //Inputs:[base, height]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n\n      // Example: base = 20, height = 30\n      const base = 20;\n      const height = 30;\n\n      const triangle = replicad.draw([-base/2, 0])\n        .lineTo([base/2, 0])\n        .lineTo([0, height])\n        .close()\n        .sketchOnPlane()\n        .extrude(2); // or your desired thickness\n\n      const newPlane = new replicad.Plane().pivot(0, 'Y');\n\n      //Shapes stored in the library have tags, a color, a plane, and a bill of materials like this. We don't modify them here\n      let shape1 = {\n        geometry: [triangle],\n        tags: []],\n        color: \"blue\",\n        plane: newPlane,\n        bom: []\n      }\n      \n      //We could at this point return shape1 as a complete shape and it will be automatically written to the library for us\n      return shape1\n      \n     \n      \n      \n          /**\n          To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n          If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n          Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n          https://replicad.xyz/docs/introapp/UserGuide.html \n          Return a replicad object that includes geometry, color, tags and plane. \n      \n      \n          Example Code Atom:\n      \n            Inputs:[shape, x];\n      \n            let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n      \n            return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n      \n            - See more examples at _______ \n      \n      \n          */\n      "
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.5191798941798942,
            "y": 0.5139664804469274,
            "uniqueID": "b0817003-9747-4925-8927-928e441a82c0",
            "ioValues": [
                {
                    "name": "inputShape",
                    "ioValue": 10
                },
                {
                    "name": "dist",
                    "ioValue": 10
                },
                {
                    "name": "height",
                    "ioValue": 10
                }
            ],
            "description": "Defines a Replicad code block.",
            "codeVersion": 1,
            "code": " \n      //Inputs:[inputShape, dist, height]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n    \n      \n      //We can also create a new shape from scratch\n      let createdRectangle = replicad.drawRectangle(5,7)\n      //This is the plane we are going to put our new shape on\n      const newPlane = new replicad.Plane().pivot(0, 'Y');\n      //And we extrude the shape to make it 3D\n      let createdShape = createdRectangle.sketchOnPlane(newPlane).extrude(height)\n\n      let base = 30;\n      const triangle = replicad.draw([-base/2, 0])\n              .lineTo([base/2, 0])\n              .lineTo([0, height])\n              .close()\n              .sketchOnPlane()\n              .extrude(2); // or your desired thickness\n      \n      //For our new geometry we need to define the tags, color, plane, etc\n      let shape2 = {\n          geometry: [createdShape], \n          tags: [\"aTag\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n      \n      //Then we can return our created shape in just the same way\n      return shape2\n \n      \n      \n          /**\n          To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n          If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n          Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n          https://replicad.xyz/docs/introapp/UserGuide.html \n          Return a replicad object that includes geometry, color, tags and plane. \n      \n      \n          Example Code Atom:\n      \n            Inputs:[shape, x];\n      \n            let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n      \n            return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n      \n            - See more examples at _______ \n      \n      \n          */\n      "
        }
    ],
    "allConnectors": [],
    "unitsKey": "MM",
    "fileTypeVersion": 1,
    "compiledBom": {},
    "filetypeVersion": 1
}